{"version":3,"sources":["utils/date-formats.js","utils/date-functions.js","components/ReminderPopOverComponent/form-components/ReminderForm.js","redux/actions/actionTypes.js","redux/actions/calendarActions.js","redux/actions/reminderActions.js","components/ReminderPopOverComponent/ReminderPopOverComponent.js","components/CalendarComponent/CalendarHeader.js","components/CalendarComponent/CalendarWeekDays.js","components/CalendarComponent/CalendarCells.js","components/ReminderListComponent/reminder-list/ExpansionReminder.js","components/ReminderListComponent/reminder-list/ReminderList.js","components/ReminderListComponent/ReminderListComponent.js","components/CalendarComponent/CalendarComponent.js","App.js","serviceWorker.js","redux/reducers/calendarReducer.js","redux/reducers/reminderReducer.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["LongTimeFormat","getPrettyTime","date","dateFns","getRightTimeDate","selectedDate","time","day","getDate","month","getMonth","year","getYear","h","getHours","m","getMinutes","Date","getRemindersOfDate","reminders","_","filter","orderRemindersFromDateAsc","sort","a","b","reminderDate","useStyles","makeStyles","theme","container","padding","textField","marginLeft","spacing","marginRight","width","datePickers","marginTop","button","ReminderForm","props","classes","React","useState","reminderText","setReminderText","selectedTime","setSelectedTime","onSubmit","e","preventDefault","reminder","id","Math","random","toString","text","addReminder","closePopOver","className","noValidate","autoComplete","FormControl","required","TextField","type","margin","onChange","event","target","value","utils","DateFnsUtils","label","realTime","KeyboardButtonProps","Button","color","SELECT_DATE","GET_CURRENT_MONTH","OPEN_POP_OVER","CLOSE_POP_OVER","OPEN_REMINDER_LIST","CLOSE_REMINDER_LIST","SET_ANCHOR_EL","ADD_REMINDER","EDIT_REMINDER","DELETE_REMINDER","selectDateAction","payload","closePopOverAction","closeReminderListAction","addReminderAction","ReminderPopOverComponent","handleClose","bind","this","openPopOver","anchorEl","undefined","Popover","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","typography","Component","connect","state","calendar","currentMonth","openedPopOver","dispatch","selectDate","withStyles","CalendarHeader","onClick","prevMonth","nextMonth","CalendarWeekDays","days","startDate","i","push","key","root","iconHover","red","zIndex","fontSize","position","CalendarCells","onDateClick","onClickPopOver","onClickReminderList","monthStart","monthEnd","endDate","rows","formattedDate","cloneDay","length","IconButton","ExpansionReminder","useEffect","handleEditReminder","editReminder","closeReminderList","placeholder","console","log","deleteReminder","heading","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","secondary","ReminderList","expanded","setExpanded","map","el","index","ExpansionPanel","panel","isExpanded","ExpansionPanelSummary","expandIcon","aria-controls","ReminderListComponent","openedReminderList","editReminderAction","deleteReminderAction","CalendarComponent","setAnchorEl","currentTarget","stopPropagation","openReminderList","getCurrentMonth","getCurrentMonthAction","App","Boolean","window","location","hostname","match","initialState","calendarReducer","action","Object","assign","reminderReducer","item","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.934225b7.chunk.js","sourcesContent":["//Date formats based on date-fns doc\n\nexport const MonthDayYearFormat = \"PP\";\nexport const LongTimeFormat = \"p\";\n","import * as dateFns from 'date-fns';\nimport {LongTimeFormat} from \"./date-formats\";\nimport _ from 'lodash';\n\nexport function getPrettyTime(date) {\n  let formattedTime = dateFns.format(date, LongTimeFormat);\n  return formattedTime;\n}\n\nexport function getRightTimeDate(selectedDate, time) {\n  let day = selectedDate.getDate();\n  let month = selectedDate.getMonth();\n  let year = selectedDate.getYear();\n\n  let h = time.getHours();\n  let m = time.getMinutes();\n\n  let date = new Date(year, month, day, h, m);\n\n  return date;\n}\n\n\n\nexport function getRemindersOfDate(reminders, selectedDate) {\n  let filteredReminders = _.filter(reminders, {selectedDate: selectedDate});\n  return filteredReminders;\n}\n\n\nexport function orderRemindersFromDateAsc(reminders) {\n  let sorted = reminders.sort((a, b) => dateFns.compareAsc(a.reminderDate, b.reminderDate));\n  return sorted;\n}\n\nexport function orderRemindersFromDateDesc(reminders) {\n  let sorted = reminders.sort((a, b) => dateFns.compareDesc(a.reminderDate, b.reminderDate));\n  return sorted;\n}\n\n\n\n\n","import React from 'react';\nimport 'date-fns';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker\n} from '@material-ui/pickers';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport {getPrettyTime, getRightTimeDate} from \"../../../utils/date-functions\";\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    padding: \"10px\",\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400,\n  },\n  datePickers: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(2),\n    width: 150,\n  },\n  button: {\n    marginTop: theme.spacing(2)\n  }\n\n}));\n\nconst ReminderForm = (props) => {\n  const classes = useStyles();\n\n  const [reminderText, setReminderText] = React.useState(\"\");\n  const [selectedTime, setSelectedTime] = React.useState(new Date());\n\n  const handleTextChange = event => {\n    let text = event.target.value;\n    setReminderText(text);\n  }\n\n  const handleTimeChange = time => {\n    let realTime = getRightTimeDate(props.selectedDate, time);\n    setSelectedTime(realTime);\n  }\n\n  const submitReminder = (e) => {\n    e.preventDefault();\n\n    let reminder = {\n      id: \"id\"+(Math.random() * 1000).toString(),\n      selectedDate: props.selectedDate,\n      reminderDate: selectedTime,\n      text: reminderText,\n      time: getPrettyTime(selectedTime)\n    };\n\n    props.addReminder(reminder);\n    props.closePopOver();\n  }\n\n  return (\n    <form onSubmit={submitReminder} className={classes.container} noValidate autoComplete=\"off\">\n      <FormControl required={true}>\n        <div className=\"row\">\n          <TextField\n            required\n            type=\"text\"\n            id=\"standard-basic\"\n            className={classes.textField}\n            margin=\"normal\"\n            onChange={handleTextChange}\n          />\n        </div>\n        <div className=\"row\">\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <div className=\"col-md-6\">\n            <KeyboardTimePicker\n                className={classes.datePickers}\n                id=\"time-picker\"\n                label=\"Time picker\"\n                value={selectedTime}\n                onChange={handleTimeChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change time',\n                }}\n              />\n            </div>\n          </MuiPickersUtilsProvider>\n        </div>\n        <div className=\"row\">\n          <Button\n            type=\"submit\"\n            color=\"primary\"\n            className={classes.button}\n          >\n            Add\n          </Button>\n        </div>\n      </FormControl>\n    </form>\n  );\n}\n\nexport default ReminderForm;\n","export const SELECT_DATE = \"SELECT_DATE\";\nexport const GET_CURRENT_MONTH = \"GET_CURRENT_MONTH\";\n\nexport const OPEN_POP_OVER = \"OPEN_POP_OVER\";\nexport const CLOSE_POP_OVER = \"CLOSE_POP_OVER\";\n\nexport const OPEN_REMINDER_LIST = \"OPEN_REMINDER_LIST\";\nexport const CLOSE_REMINDER_LIST = \"CLOSE_REMINDER_LIST\";\n\nexport const SET_ANCHOR_EL = \"SET_ANCHOR_EL\";\n\nexport const ADD_REMINDER = \"ADD_REMINDER\";\nexport const EDIT_REMINDER = \"EDIT_REMINDER\";\nexport const DELETE_REMINDER = \"DELETE_REMINDER\";\n\n\n","import {\n  GET_CURRENT_MONTH,\n  OPEN_POP_OVER,\n  CLOSE_POP_OVER,\n  SET_ANCHOR_EL,\n  SELECT_DATE, OPEN_REMINDER_LIST, CLOSE_REMINDER_LIST\n} from \"./actionTypes\";\n\n\nexport function getCurrentMonthAction(date) {\n  return {\n    type: GET_CURRENT_MONTH,\n    payload: date\n  }\n}\n\nexport function selectDateAction(date) {\n  return {\n    type: SELECT_DATE,\n    payload: date\n  }\n}\n\nexport function openPopOverAction() {\n  return {\n    type: OPEN_POP_OVER,\n    payload: true\n  }\n}\n\nexport function closePopOverAction() {\n  return {\n    type: CLOSE_POP_OVER,\n    payload: false\n  }\n}\n\nexport function openReminderListAction() {\n  return {\n    type: OPEN_REMINDER_LIST,\n    payload: true\n  }\n}\n\nexport function closeReminderListAction() {\n  return {\n    type: CLOSE_REMINDER_LIST,\n    payload: false\n  }\n}\n\n\nexport function setAnchorElAction(el) {\n  return {\n    type: SET_ANCHOR_EL,\n    payload: el\n  }\n}\n","import {\n  ADD_REMINDER,\n  DELETE_REMINDER,\n  EDIT_REMINDER\n} from \"./actionTypes\";\n\nexport function addReminderAction(reminder) {\n  return {\n    type: ADD_REMINDER,\n    payload: reminder\n  }\n}\n\nexport function editReminderAction(reminder) {\n  return {\n    id: reminder.id,\n    type: EDIT_REMINDER,\n    payload: reminder\n  }\n}\n\nexport function deleteReminderAction(reminder) {\n  return {\n    id: reminder.id,\n    type: DELETE_REMINDER,\n    payload: reminder\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as dateFns from 'date-fns';\nimport { withStyles } from '@material-ui/styles';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\nimport ReminderForm from \"./form-components/ReminderForm\";\n\nimport {\n  closePopOverAction,\n  selectDateAction\n} from \"../../redux/actions/calendarActions\";\n\nimport connect from \"react-redux/es/connect/connect\";\nimport {MonthDayYearFormat} from \"../../utils/date-formats\";\nimport {addReminderAction} from \"../../redux/actions/reminderActions\";\n\nconst styles =  ({\n  typography: {\n    padding: \"10px\",\n  },\n});\n\n\nclass ReminderPopOverComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleClose= () => {\n    this.props.closePopOver();\n  }\n\n  render() {\n    const { classes,\n      openPopOver,\n      closePopOver,\n      anchorEl,\n      selectedDate,\n      addReminder,\n    } = this.props;\n\n    const id = openPopOver ? 'simple-popover' : undefined;\n\n    return (\n      <div>\n        <Popover\n          id={id}\n          open={openPopOver}\n          anchorEl={anchorEl}\n          onClose={this.handleClose}\n          anchorOrigin={{\n            vertical: 'center',\n            horizontal: 'center',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n        >\n          <Typography className={classes.typography}>\n            Add Reminder for\n            <br/><b>{dateFns.format(selectedDate, MonthDayYearFormat)}</b>\n          </Typography>\n          <ReminderForm\n            className={classes.typography}\n            selectedDate={selectedDate}\n            closePopOver={closePopOver}\n            addReminder={addReminder}\n          />\n        </Popover>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  const {\n    selectedDate,\n    currentMonth,\n    openedPopOver,\n    anchorEl,\n  } = state.calendar;\n\n\n\n  return {\n    selectedDate: selectedDate,\n    currentMonth: currentMonth,\n    openedPopOver: openedPopOver,\n    anchorEl: anchorEl,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectDate: (date) => dispatch(selectDateAction(date)),\n  closePopOver: () => dispatch(closePopOverAction()),\n  addReminder: (reminder) => dispatch(addReminderAction(reminder))\n});\n\n\n\nReminderPopOverComponent.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(ReminderPopOverComponent));\n\n\n\n","import React from 'react';\nimport * as dateFns from \"date-fns\";\n\nconst CalendarHeader = (props) => {\n  const dateFormat = \"MMMM yyyy\";\n  return (\n    <div className=\"header row flex-middle\">\n      <div className=\"col col-start\">\n        <div className=\"icon\" onClick={props.prevMonth}>\n          chevron_left\n        </div>\n      </div>\n      <div className=\"col col-center\">\n        <span>{props.currentMonth ? dateFns.format(props.currentMonth, dateFormat) : null}</span>\n      </div>\n      <div className=\"col col-end\" onClick={props.nextMonth}>\n        <div className=\"icon\">chevron_right</div>\n      </div>\n    </div>\n  );\n}\n\nexport default CalendarHeader;\n","import React from 'react';\nimport * as dateFns from \"date-fns\";\n\nconst CalendarWeekDays = (props) => {\n  const dateFormat = \"EEEE\";\n  const days = [];\n  let startDate = dateFns.startOfWeek(props.currentMonth);\n\n  for (let i = 0; i < 7; i++) {\n    days.push(\n      <div className=\"col col-center\" key={i}>\n        { dateFns.format(dateFns.addDays(startDate, i), dateFormat) }\n      </div>\n    );\n  }\n\n  return <div className=\"days row\">{days}</div>;\n}\n\n\nexport default CalendarWeekDays;\n","import React from \"react\";\nimport * as dateFns from \"date-fns\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\nimport { getRemindersOfDate } from \"../../utils/date-functions\";\nimport NotificationsOutlinedIcon from '@material-ui/icons/NotificationsOutlined';\nimport IconButton from \"@material-ui/core/IconButton\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > svg': {\n      margin: theme.spacing(2),\n    },\n  },\n  iconHover: {\n    '&:hover': {\n      color: red[800],\n    },\n    zIndex: 10,\n    fontSize: 30,\n    position: \"relative\"\n  },\n}));\n\nconst CalendarCells = (props) => {\n\n  const classes = useStyles();\n\n  const { currentMonth,\n    selectedDate,\n    onDateClick,\n    onClickPopOver,\n    onClickReminderList,\n    reminders\n  } = props;\n\n  //taking month's boundaries\n  const monthStart = dateFns.startOfMonth(currentMonth);\n  const monthEnd = dateFns.endOfMonth(monthStart);\n\n  //taking begin and end of a Week - it can be starting from previous month\n  const startDate = dateFns.startOfWeek(monthStart);\n  const endDate = dateFns.endOfWeek(monthEnd);\n\n  const dateFormat = \"d\";\n\n  const rows = [];\n  let days = [];\n  let day = startDate;\n  let formattedDate = \"\";\n\n  while (day <= endDate) {\n    for (let i = 0; i < 7; i++) {\n      formattedDate = dateFns.format(day, dateFormat);\n\n      const cloneDay = day;\n\n      days.push(\n        <div\n          className={`col cell ${\n            //disable/selected/nothing ternary operation\n            !dateFns.isSameMonth(day, monthStart) ? \"disabled\" : (dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\") }`\n          }\n          key={day}\n          onClick={(e) => {\n            onDateClick(dateFns.toDate(cloneDay));\n            onClickPopOver(e);\n          }}\n        >\n\n          {\n            (getRemindersOfDate(reminders, day).length > 0) ? (\n\n              <IconButton onClick={(e) => {\n                  onDateClick(dateFns.toDate(cloneDay));\n                  onClickReminderList(e);\n                }}\n              >\n                <NotificationsOutlinedIcon\n                  className={classes.iconHover}\n                  color=\"error\"\n                />\n              </IconButton>\n            ) : null\n          }\n\n          <span className=\"number\">{formattedDate}</span>\n          <span className=\"bg\">{formattedDate}</span>\n        </div>\n      );\n\n      //next day...\n      day = dateFns.addDays(day, 1);\n    }\n\n    rows.push(\n      <div className=\"row\" key={day}>\n        {days}\n      </div>\n    );\n    days = [];\n  }\n\n  return <div className=\"body\">{rows}</div>;\n}\n\n\nexport default CalendarCells;\n","import React from 'react';\nimport 'date-fns';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Button from '@material-ui/core/Button';\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker\n} from '@material-ui/pickers';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport {getPrettyTime, getRightTimeDate} from \"../../../utils/date-functions\";\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    padding: \"10px\",\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400,\n  },\n  datePickers: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(2),\n    width: 150,\n  },\n  button: {\n    marginTop: theme.spacing(2),\n    zIndex: 10\n  }\n\n}));\n\nconst ExpansionReminder = (props) => {\n  const classes = useStyles();\n\n  const [reminderText, setReminderText] = React.useState(\"\");\n  const [selectedTime, setSelectedTime] = React.useState(new Date());\n\n  React.useEffect(() => {\n    setSelectedTime(props.reminder.reminderDate);\n  }, [props.reminder.reminderDate]);\n\n  const handleTextChange = event => {\n    let text = event.target.value;\n    setReminderText(text);\n  }\n\n  const handleTimeChange = time => {\n    console.log(time);\n    let realTime = getRightTimeDate(props.reminder.selectedDate, time);\n    setSelectedTime(realTime);\n  }\n\n  const handleEditReminder = e => {\n    e.preventDefault();\n\n    let reminder = {\n      id: props.reminder.id,\n      selectedDate: props.reminder.selectedDate,\n      reminderDate: selectedTime,\n      text: reminderText,\n      time: getPrettyTime(selectedTime)\n    };\n\n    props.editReminder(reminder);\n    props.closeReminderList();\n  }\n\n  const handleDeleteReminder = e => {\n    e.preventDefault();\n\n    let reminder = {\n      id: props.reminder.id,\n      selectedDate: props.reminder.selectedDate,\n      reminderDate: selectedTime,\n      text: reminderText,\n      time: getPrettyTime(selectedTime)\n    };\n\n    props.deleteReminder(reminder);\n    props.closeReminderList();\n  }\n\n\n  return (\n    <form onSubmit={handleEditReminder} className={classes.container} noValidate autoComplete=\"off\">\n      <FormControl required={true}>\n        <div className=\"row\">\n          <TextField\n            placeholder={props.reminder.text}\n            required\n            type=\"text\"\n            id=\"standard-basic\"\n            className={classes.textField}\n            margin=\"normal\"\n            onChange={handleTextChange}\n          />\n        </div>\n        <div className=\"row\">\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <div className=\"col-md-6\">\n              <KeyboardTimePicker\n                className={classes.datePickers}\n                id=\"time-picker\"\n                label=\"Time picker\"\n                value={selectedTime}\n                onChange={handleTimeChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change time',\n                }}\n              />\n            </div>\n          </MuiPickersUtilsProvider>\n        </div>\n        <div className=\"row\">\n          <Button\n            type=\"submit\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={handleEditReminder}\n          >\n            Edit\n          </Button>\n          <Button\n            type=\"submit\"\n            color=\"secondary\"\n            className={classes.button}\n            onClick={handleDeleteReminder}\n          >\n            Delete\n          </Button>\n\n        </div>\n      </FormControl>\n    </form>\n  );\n}\n\nexport default ExpansionReminder;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpansionReminder from \"./ExpansionReminder\";\nimport {orderRemindersFromDateAsc} from \"../../../utils/date-functions\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst ReminderList = (props) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n\n  React.useEffect(() => {\n    orderRemindersFromDateAsc(props.reminders);\n  });\n\n  const handleChange = panel => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  return (\n    <div className={classes.root}>\n\n      { props.reminders.map((el, index) =>\n        <ExpansionPanel expanded={expanded === 'panel'+ el.id} onChange={handleChange('panel'+el.id)} key={index}>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls={\"panel\" + el.id + \"bh-content\"}\n            id={\"panel\"+el.id+\"bh-header\"}\n          >\n            <Typography className={classes.heading}>{el.text}</Typography>\n          </ExpansionPanelSummary>\n\n          <ExpansionReminder\n            reminder={el}\n            editReminder={props.editReminder}\n            deleteReminder={props.deleteReminder}\n            closeReminderList={props.closeReminderList}\n          />\n        </ExpansionPanel>\n      )}\n    </div>\n  );\n}\n\n\nexport default ReminderList;\n","import React, { Component } from 'react';\nimport Popover from \"@material-ui/core/Popover\";\nimport { withStyles } from '@material-ui/styles';\n\nimport Typography from \"@material-ui/core/Typography\";\nimport * as dateFns from \"date-fns\";\nimport {MonthDayYearFormat} from \"../../utils/date-formats\";\nimport {\n  closePopOverAction,\n  closeReminderListAction,\n  selectDateAction\n} from \"../../redux/actions/calendarActions\";\n\nimport { addReminderAction, deleteReminderAction, editReminderAction } from \"../../redux/actions/reminderActions\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport ReminderList from \"./reminder-list/ReminderList\";\nimport { getRemindersOfDate, orderRemindersFromDateAsc } from \"../../utils/date-functions\";\n\nconst styles =  ({\n  typography: {\n    padding: \"10px\",\n  },\n});\n\n\nclass ReminderListComponent extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.closePopOver();\n  }\n\n  handleClose= () => {\n    this.props.closeReminderList();\n  }\n\n  render() {\n    const { classes,\n      openedReminderList,\n      anchorEl,\n      selectedDate,\n      reminders,\n      editReminder,\n      deleteReminder,\n      closeReminderList\n    } = this.props;\n\n    const id = openedReminderList ? 'simple-popover' : undefined;\n\n\n    return (\n      <div>\n        <Popover\n          id={id}\n          open={openedReminderList}\n          anchorEl={anchorEl}\n          onClose={this.handleClose}\n          anchorOrigin={{\n            vertical: 'center',\n            horizontal: 'center',\n          }}\n          transformOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n        >\n          <Typography className={classes.typography}>\n            Reminders for:\n            <br/><b>{dateFns.format(selectedDate, MonthDayYearFormat)}</b>\n          </Typography>\n\n          <ReminderList\n            reminders={orderRemindersFromDateAsc(getRemindersOfDate(reminders, selectedDate))}\n            editReminder={editReminder}\n            deleteReminder={deleteReminder}\n            closeReminderList={closeReminderList}\n          />\n\n        </Popover>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  const {\n    selectedDate,\n    currentMonth,\n    openedReminderList,\n    anchorEl,\n    openedPopOver\n  } = state.calendar;\n\n  const {\n    reminders\n  } = state.reminder;\n\n\n\n  return {\n    selectedDate: selectedDate,\n    currentMonth: currentMonth,\n    openedReminderList: openedReminderList,\n    openedPopOver: openedPopOver,\n    anchorEl: anchorEl,\n    reminders: reminders\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectDate: (date) => dispatch(selectDateAction(date)),\n  closeReminderList: () => dispatch(closeReminderListAction()),\n  addReminder: (reminder) => dispatch(addReminderAction(reminder)),\n  editReminder: (reminder) => dispatch(editReminderAction(reminder)),\n  deleteReminder: (reminder) => dispatch(deleteReminderAction(reminder)),\n  closePopOver: () => dispatch(closePopOverAction())\n});\n\n\n\nReminderListComponent.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(ReminderListComponent));\n\n\n\n","import React from \"react\";\nimport * as dateFns from 'date-fns';\nimport './CalendarComponent.css';\nimport connect from \"react-redux/es/connect/connect\";\nimport ReminderPopOverComponent from \"../ReminderPopOverComponent/ReminderPopOverComponent\";\nimport CalendarHeader from './CalendarHeader';\nimport CalendarWeekDays from './CalendarWeekDays';\nimport CalendarCells from './CalendarCells';\n\nimport {\n  closePopOverAction, closeReminderListAction,\n  getCurrentMonthAction,\n  openPopOverAction, openReminderListAction,\n  selectDateAction,\n  setAnchorElAction\n} from \"../../redux/actions/calendarActions\";\n\nimport ReminderListComponent from \"../ReminderListComponent\";\n\nclass CalendarComponent extends React.Component {\n\n  onDateClick = day => {\n    this.props.selectDate(day);\n  };\n\n  onClickPopOver = event => {\n    this.props.setAnchorEl(event.currentTarget);\n    this.props.openPopOver();\n  }\n\n  onClickReminderList = event => {\n    event.stopPropagation();\n    this.props.setAnchorEl(event.currentTarget);\n    this.props.openReminderList();\n    this.props.closePopOver();\n    return false;\n  }\n\n\n  nextMonth = () => {\n    let nextMonth = dateFns.addMonths(this.props.currentMonth, 1);\n    this.props.getCurrentMonth(nextMonth);\n  };\n\n  prevMonth = () => {\n    let prevMonth = dateFns.subMonths(this.props.currentMonth, 1);\n    this.props.getCurrentMonth(prevMonth);\n  };\n\n  render() {\n    const { selectedDate, currentMonth, reminders } = this.props;\n\n    return (\n      <div className=\"calendar\">\n        <CalendarHeader\n          currentMonth={currentMonth}\n          prevMonth={this.prevMonth}\n          nextMonth={this.nextMonth}\n        />\n        <CalendarWeekDays\n          currentMonth={currentMonth}\n        />\n\n        <CalendarCells\n          currentMonth={currentMonth}\n          selectedDate={selectedDate}\n          reminders={reminders}\n          onDateClick={this.onDateClick}\n          onClickPopOver={this.onClickPopOver}\n          onClickReminderList={this.onClickReminderList}\n        />\n\n        <ReminderPopOverComponent\n          openPopOver={this.props.openedPopOver}\n          closePopOver={this.props.closePopOver}\n          anchorEl={this.props.anchorEl}\n        />\n\n        <ReminderListComponent\n          openReminderList={this.props.openedReminderList}\n          closeReminderList={this.props.closeReminderList}\n          closePopOver={this.props.closePopOver}\n          anchorEl={this.props.anchorEl}\n        />\n\n        \n      </div>\n    );\n  }\n}\n\n\n\nconst mapStateToProps = state => {\n  const {\n    selectedDate,\n    currentMonth,\n    openedPopOver,\n    openedReminderList,\n    anchorEl\n  } = state.calendar;\n\n  const {\n    reminders\n  } = state.reminder;\n\n  return {\n    selectedDate: selectedDate,\n    currentMonth: currentMonth,\n    openedPopOver: openedPopOver,\n    openedReminderList: openedReminderList,\n    anchorEl: anchorEl,\n    reminders: reminders\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectDate: (date) => dispatch(selectDateAction(date)),\n  getCurrentMonth: (date) => dispatch(getCurrentMonthAction(date)),\n  openPopOver: () => dispatch(openPopOverAction()),\n  closePopOver: () => dispatch(closePopOverAction()),\n  openReminderList: () => dispatch(openReminderListAction()),\n  closeReminderList: () => dispatch(closeReminderListAction()),\n  setAnchorEl: (e) => dispatch(setAnchorElAction(e))\n});\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CalendarComponent);\n\n\n","import React from 'react';\nimport CalendarComponent from \"./components/CalendarComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CalendarComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport {\n  GET_CURRENT_MONTH,\n  OPEN_POP_OVER,\n  CLOSE_POP_OVER,\n  SELECT_DATE,\n  SET_ANCHOR_EL, OPEN_REMINDER_LIST, CLOSE_REMINDER_LIST\n} from \"../actions/actionTypes\";\n\nlet initialState = {\n  selectedDate: new Date(),\n  currentMonth: new Date(),\n  openedPopOver: false,\n  openedReminderList: false,\n  anchorEl: null\n};\n\n\nconst calendarReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SELECT_DATE:\n      return Object.assign({}, state, { selectedDate: action.payload });\n    case GET_CURRENT_MONTH:\n      return  Object.assign({}, state, { currentMonth: action.payload });\n    case OPEN_POP_OVER:\n      return Object.assign({}, state, { openedPopOver: action.payload });\n    case CLOSE_POP_OVER:\n      return Object.assign({}, state, { openedPopOver: action.payload });\n    case OPEN_REMINDER_LIST:\n      return Object.assign({}, state, { openedReminderList: action.payload });\n    case CLOSE_REMINDER_LIST:\n      return Object.assign({}, state, { openedReminderList: action.payload });\n    case SET_ANCHOR_EL:\n      return Object.assign({}, state, { anchorEl: action.payload });\n    default:\n      return state;\n  }\n};\n\nexport default calendarReducer;\n","import {\n  ADD_REMINDER, DELETE_REMINDER, EDIT_REMINDER\n} from \"../actions/actionTypes\";\n\nlet initialState = {\n  reminders: []\n};\n\nconst reminderReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_REMINDER:\n      return Object.assign({}, state, { reminders: [...state.reminders, action.payload] });\n\n    case EDIT_REMINDER:\n      return Object.assign({}, state, {\n        reminders: state.reminders.map((reminder) => reminder.id === action.id ?\n          // transform the one with a matching id\n          {...reminder, ...action.payload } :\n          // otherwise return original reminder\n          reminder\n        )\n      });\n\n    case DELETE_REMINDER:\n      return Object.assign({}, state, {\n        reminders: state.reminders.filter((item) => item.id !== action.id)\n      });\n    default:\n      return state;\n  }\n};\n\nexport default reminderReducer;\n","import { combineReducers } from 'redux';\nimport calendarReducer from './calendarReducer';\nimport reminderReducer from './reminderReducer';\n\nconst rootReducer = combineReducers({\n  calendar: calendarReducer,\n  reminder: reminderReducer\n});\n\nexport default rootReducer;\n","import rootReducer from './reducers/rootReducer';\n\n\nimport { createStore } from \"redux\";\n\nconst store = createStore(rootReducer);\n\n\nexport default store;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}